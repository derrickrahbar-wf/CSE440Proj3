(* the goal of this test case is to show how extended value numbering *)
(* is happening by having two basic blocs that are value numbered in  *)
(* the context of a common ancestor                                   *)

program testCases;

class testCases

BEGIN
	VAR 
		a1 : integer;
		a2 : integer;
		a3 : integer;
		a4 : integer;
		a5 : integer;
		a6 : integer;
		a7 : integer;
		a8 : integer;
		a9 : integer;
		b1 : integer;
		b2 : integer;
		b3 : integer;
		b4 : integer;
		b5 : integer;
		b6 : integer;
		b7 : integer;
		b8 : integer;
		b9 : integer;
		c1 : integer;
		c2 : integer;
		c3 : integer;
		c4 : integer;
		c5 : integer;
		c6 : integer;
		c7 : integer;
		c8 : integer;
		c9 : integer;
		d1 : integer;
		d2 : integer;
	


	FUNCTION testCases;
	BEGIN
		a1 := b1+c1;          (* a1 = b1+c1     *)
		a2 := b1+c1;          (* a2 = a1        *)
		a3 := b1+c1;          (* a3 = a1        *)
		a4 := a1 + a2;        (* a4 = 2*a1      *)
		d1 := b1;             (* d1 = b1        *)
		a5 := d1 + c1;        (* a5 = a1        *)
		a6 := a1 + a7;        (* a6 = a1+a7     *)
		a8 := a5 + a7;        (* a8 = a1+a7     *)

		if (d1 > d2) then     (* t_1 = d1 > d2  *)
		BEGIN                 (* if t_1 goto L1 *)
                                      (* goto L2        *)
                                      (* L1:            *)
			c3 := c1;     (*    c1 = c3     *)
			b1 := a9;     (*    b1 = a9     *)
			b2 := b1+c1;  (*    b2 = b1+c1  *)
			b3 := d1+c1;  (*    b3 = a1     *)
			b2 := a1-a1;  (*    b2 = 0      *)
			b3 := b2-b2   (*    b3 = 0      *)
		END ELSE
		BEGIN                 (* L2:            *)
                        d1 := d1+d1;  (*    d1 = 2*d1   *)
			b2 := b1+c1;  (*    b2 = a1     *)
			b3 := d1+c1;  (*    b3 = d1+c1  *)
			b4 := 2*a1    (*    b4 = a4     *)
		END	
	END
END
.

